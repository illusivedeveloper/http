#!/usr/bin/python3

import sys
import json
import http.client
import argparse

default_host = "127.0.0.1"
default_port = "8000"

def efsctl_query(method, url, headers, content):
    conn.request(method, url, content, headers)

def efsctl_fs_create():
    parser = argparse.ArgumentParser(
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description='''FS create.''',
                usage="create name=NAME --options=OPTIONS")

    parser.add_argument('name', help='FS name.')            
    parser.add_argument('--options', '-o', help='FS options.')

    args = parser.parse_args(sys.argv[3:])
    name = args.name
    options = args.options

    method = "PUT"
    url = "/fs/create/"
    headers = {}

    options_list = []
    fs_json_data = {}
    fs_json_options = {}
    encoded_json_content = {}
    
    fs_json_data.update({"fs-name": name})
    
    if options != None:
        option_list = options.split(',')
        for option_token in option_list:
            option = option_token.split(':')
            key = option[0]
            val = option[1]
            fs_json_options.update({key : val})

    fs_json_data.update("fs-option", fs_json_options)

    encoded_json_content = json.dumps(fs_json_data).encode('utf-8')
    
    content = encoded_json_content

    efsctl_query(method, url, headers, content)
    conn.getresponse()

def efsctl_fs_delete():
    method = "DELETE"
    url = "/fs/delete/"
    headers = {}
    fs_name = ""
    content = ""
    efsctl_query(method, url, headers, content)
    conn.getresponse()

def efsctl_fs(command):
    command_switcher = \
            {"create" : efsctl_fs_create,
             "delete" : efsctl_fs_delete
            }
    fs_command = command_switcher.get(command)
    if fs_command != None:
        fs_command()
    else:
        parser.print_help()

def efsctl_export(command):
    command_switcher = \
            {"create" : efsctl_export_create,
             "delete" : efsctl_export_delete
            }
    export_command = command_switcher.get(command)
    if export_command != None:
        export_command()
    else:
        parser.print_help()


def efsctl_execute():
    controller = args.controller
    command = args.command
    controller_switcher = \
            {
                "fs" : efsctl_fs,
                "export" : efsctl_export
            }
    controller = controller_switcher.get(controller)
    if controller != None:
        controller(command)
    else:
        parser.print_help()

def efsctl_init():
    port = args.port
    host = args.host

    if port is None:
        port = default_port

    if host is None:
        host = default_host

    global conn
    conn = http.client.HTTPConnection(host, port)
    try:
        conn_ok = True
    except:
        conn_ok = False

    return conn_ok
        

if __name__ == "__main__":

    parser = argparse.ArgumentParser(prog='efsctl',
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description='''Utility to control EFS.
                
    Controllers:
        fs          Filesystem management controller.
        export      Export management controller.
        fault       Fault management controller.

    FS Commands:
        create      Create a filesystem.
        delete      Delete a filesystem.
        list        List all filesystems.
        
    Export Commands:
        create      Create an export.
        delete      Delete an export.
        list        List all export.''',
                usage='''efsctl <controller> <command> [<args>]''')

    parser.add_argument('--host', help='Host name.')
    parser.add_argument('--port', '-p', help='Port number.')



    parser.add_argument('controller')
    parser.add_argument('command')

    args = parser.parse_args(sys.argv[1:3])
        
    if efsctl_init():
        efsctl_execute()
