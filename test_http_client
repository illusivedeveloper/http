#!/usr/bin/python3

import sys
import json
import http.client
import urllib.request
import urllib.parse
import argparse

default_host = "127.0.0.1"
default_port = "8000"

def efsctl_query(method, url, headers, content):
    conn.request(method, url, content, headers)


def efsctl_fs_echo():
    method = "PUT"
    url = "/echo"
    headers = {}
    name = args2.name
    options = args2.options
    
    content = b'{"fs-name" : name, "fs-options" : options}'
    efsctl_query(method, url, headers, content)
    conn.getresponse()

def efsctl_fs_create():
    method = "PUT"
    url = "/create"
    headers = {}
    fs_name = ""
    fs_options = "" 
    content = ""
    efsctl_query(method, url, headers, content)
    conn.getresponse()

def efsctl_fs(command):
    command_switcher = \
            {"echo" : efsctl_fs_echo,
             "create" : efsctl_fs_create
            }
    fs_command = command_switcher.get(command)
    fs_command()
    '''
    try:
        fs_command()
    except:
        print("Invalid Command")
    '''

def efsctl_export(command):
    command_switcher = \
            {"echo" : efsctl_export_echo
            }
    export_command = command_switcher.get(command)
    export_command()

def efsctl_execute():
    controller = args.controller
    command = args.command
    controller_switcher = \
            {"fs" : efsctl_fs,
             "export" : efsctl_export
            }
    controller = controller_switcher.get(controller)
    #controller(command)    
    try:
        controller(command)
    except:
        print("Error: Invalid Controller or Command")
        print('''Valid Controllers with respective commands are:
                Controller: fs | Commands: [echo (fsname, fs-options), create]
                Controller: export | Commands: [echo]''')

def efsctl_init():
    port = args.port
    host = args.host

    if port is None:
        port = default_port

    if host is None:
        host = default_host

    print("Setting connection...")
    global conn 
    conn = http.client.HTTPConnection(host, port)
    '''
    conn.request("GET", "/")
    response = conn.getresponse()
    print("Status Code: {} Reason: {}".format(response.status, response.reason))
    data = response.read()
    print(data.decode())
    '''

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Utility to control fs functions using REST API and HTTP protocol.')
    parser.add_argument('--host', required=True, help='Control server host IP.')
    parser.add_argument('--port', '-p', required=True, help='Port No.')

    parser.add_argument('controller')
    parser.add_argument('command')

    subparsers = parser.add_subparsers(help='sub-command help')
    parser_controller = subparsers.add_parser('controller', help='Controlle help')
    parser_controller.add_argument()
    parser_a.add_argument('--name', '-n', required=True, help='fs-name to pass on to controller\'s command')
    parser_a.add_argument('--options', '-o', required=True, help='fs-options to pass on to controller\'s command')

    args = parser.parse_args()
    args2 = parser_a.parse_args()
    
    efsctl_init()
    efsctl_execute()
